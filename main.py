import os
import sqlite3
from datetime import datetime
from random import choice
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
from life_chart import generate_high_quality_life_chart

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "7784577846:AAGOSVUBf6J33PFSZo9ApK8NGSS4XU0Cv1w"
DB_PATH = "users.db"
PORT = int(os.environ.get("PORT", 8443))
URL = os.environ.get("RENDER_EXTERNAL_URL")

app = Flask(__name__)
bot = Bot(token=TOKEN)
dispatcher = Dispatcher(bot, None, workers=4, use_context=True)

MOTIVATIONAL_QUOTES = [
    "–ñ–∏–≤–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ üôè",
    "–ö–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è ‚Äì –Ω–æ–≤—ã–π —à–∞–Ω—Å! ‚ö°",
    "–í—Ä–µ–º—è ‚Äì —Ç–≤–æ–π —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å ‚è≥",
    "–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! üöÄ",
]

# –¢–≤–æ—è –ª–æ–≥–∏–∫–∞ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            birth_date TEXT
        )
    ''')
    c.execute("PRAGMA table_info(users)")
    columns = [row[1] for row in c.fetchall()]
    if "is_subscribed" not in columns:
        c.execute("ALTER TABLE users ADD COLUMN is_subscribed INTEGER DEFAULT 0")
    conn.commit()
    conn.close()

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share"),
         InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscribe")],
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="quick")]
    ]
    return InlineKeyboardMarkup(keyboard)

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì), –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Ç–∞–±–ª–∏—Ü—É –∂–∏–∑–Ω–∏!",
        reply_markup=get_main_menu()
    )

def handle_birthdate(update: Update, context: CallbackContext):
    try:
        birth_date = datetime.strptime(update.message.text, "%d.%m.%Y")
        user_id = update.message.from_user.id
        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute("REPLACE INTO users (user_id, birth_date, is_subscribed) VALUES (?, ?, COALESCE((SELECT is_subscribed FROM users WHERE user_id = ?), 0))",
                  (user_id, birth_date.strftime("%d.%m.%Y"), user_id))
        conn.commit()
        conn.close()

        image_path, weeks = generate_high_quality_life_chart(birth_date.strftime("%d.%m.%Y"))
        context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(image_path, 'rb'))
        context.bot.send_message(chat_id=update.effective_chat.id, text=f"–¢—ã –ø—Ä–æ–∂–∏–ª —Å–≤–æ—é {weeks} –Ω–µ–¥–µ–ª—é. {choice(MOTIVATIONAL_QUOTES)}", reply_markup=get_main_menu())
    except ValueError:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì.")

def handle_callback_query(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT birth_date, is_subscribed FROM users WHERE user_id = ?", (query.from_user.id,))
    result = c.fetchone()
    conn.close()

    if not result:
        query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")
        return

    birth_date, is_subscribed = result

    if data == "progress":
        image_path, weeks = generate_high_quality_life_chart(birth_date)
        context.bot.send_photo(chat_id=query.from_user.id, photo=open(image_path, 'rb'))
        query.edit_message_text(f"–¢—ã –ø—Ä–æ–∂–∏–ª —Å–≤–æ—é {weeks} –Ω–µ–¥–µ–ª—é. {choice(MOTIVATIONAL_QUOTES)}", reply_markup=get_main_menu())
    elif data == "stats":
        total_weeks = 52 * 70
        image_path, weeks = generate_high_quality_life_chart(birth_date)
        percent = (weeks / total_weeks) * 100
        remaining = total_weeks - weeks
        query.edit_message_text(f"–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: {total_weeks} –Ω–µ–¥–µ–ª—å.\n–ü—Ä–æ–∂–∏—Ç–æ: {weeks} –Ω–µ–¥–µ–ª—å ({percent:.2f}%).\n–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –Ω–µ–¥–µ–ª—å.", reply_markup=get_main_menu())
    elif data == "share":
        query.edit_message_text("–Ø –∏—Å–ø–æ–ª—å–∑—É—é @weeklife1_bot, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: @weekbot1", reply_markup=get_main_menu())
    elif data == "subscribe":
        if is_subscribed:
            query.edit_message_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!", reply_markup=get_main_menu())
        else:
            query.edit_message_text("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ @weekbot1. –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!", reply_markup=get_main_menu())
    elif data == "quick":
        query.edit_message_text("/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n–û—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –î–î.–ú–ú.–ì–ì–ì–ì", reply_markup=get_main_menu())
    else:
        query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_birthdate))
dispatcher.add_handler(CallbackQueryHandler(handle_callback_query))

# Webhook endpoint
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "ok"

@app.route("/")
def index():
    return "LifeWeeksBot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    init_db()
    bot.set_webhook(f"{URL}{TOKEN}")
    app.run(host="0.0.0.0", port=PORT)