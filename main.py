import os
import sqlite3
from datetime import datetime
from random import choice
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters, CallbackContext, 
                          CallbackQueryHandler)
from life_chart import generate_high_quality_life_chart

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
TOKEN = "7784577846:AAGOSVUBf6J33PFSZo9ApK8NGSS4XU0Cv1w"
DB_PATH = "users.db"

MOTIVATIONAL_QUOTES = [
    "–ñ–∏–≤–∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ üôè",
    "–ö–∞–∂–¥–∞—è –Ω–µ–¥–µ–ª—è ‚Äì –Ω–æ–≤—ã–π —à–∞–Ω—Å! ‚ö°",
    "–í—Ä–µ–º—è ‚Äì —Ç–≤–æ–π —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å ‚è≥",
    "–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç! üöÄ",
]

def init_db():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            birth_date TEXT
        )
    ''')
    conn.commit()
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü is_subscribed, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    c.execute("PRAGMA table_info(users)")
    columns = [row[1] for row in c.fetchall()]
    if "is_subscribed" not in columns:
        try:
            c.execute("ALTER TABLE users ADD COLUMN is_subscribed INTEGER DEFAULT 0")
            conn.commit()
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ is_subscribed:", e)
    conn.close()

def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress"),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share"),
         InlineKeyboardButton("üíé –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscribe")],
        [InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="quick")]
    ]
    return InlineKeyboardMarkup(keyboard)

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Ç–∞–±–ª–∏—Ü—É –∂–∏–∑–Ω–∏!",
        reply_markup=get_main_menu()
    )

def handle_birthdate(update: Update, context: CallbackContext):
    try:
        birth_date = datetime.strptime(update.message.text, "%d.%m.%Y")
        user_id = update.message.from_user.id

        conn = sqlite3.connect(DB_PATH)
        c = conn.cursor()
        c.execute(
            "REPLACE INTO users (user_id, birth_date, is_subscribed) VALUES (?, ?, COALESCE((SELECT is_subscribed FROM users WHERE user_id = ?), 0))",
            (user_id, birth_date.strftime("%d.%m.%Y"), user_id)
        )
        conn.commit()
        conn.close()

        image_path, weeks = generate_high_quality_life_chart(birth_date.strftime("%d.%m.%Y"))
        context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(image_path, 'rb'))
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–¢—ã –ø—Ä–æ–∂–∏–ª —Å–≤–æ—é {weeks} –Ω–µ–¥–µ–ª—é. {choice(MOTIVATIONAL_QUOTES)}",
            reply_markup=get_main_menu()
        )
    except ValueError:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –î–î.–ú–ú.–ì–ì–ì–ì.")

def handle_callback_query(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data

    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT birth_date, is_subscribed FROM users WHERE user_id = ?", (query.from_user.id,))
    result = c.fetchone()
    conn.close()

    if not result:
        query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!")
        return

    birth_date, is_subscribed = result

    if data == "progress":
        image_path, weeks = generate_high_quality_life_chart(birth_date)
        context.bot.send_photo(chat_id=query.from_user.id, photo=open(image_path, 'rb'))
        query.edit_message_text(
            f"–¢—ã –ø—Ä–æ–∂–∏–ª —Å–≤–æ—é {weeks} –Ω–µ–¥–µ–ª—é. {choice(MOTIVATIONAL_QUOTES)}",
            reply_markup=get_main_menu()
        )
    elif data == "stats":
        total_weeks = 52 * 70
        image_path, weeks = generate_high_quality_life_chart(birth_date)
        percent = (weeks / total_weeks) * 100
        remaining = total_weeks - weeks
        stats_text = (f"–û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏: {total_weeks} –Ω–µ–¥–µ–ª—å.\n"
                      f"–ü—Ä–æ–∂–∏—Ç–æ: {weeks} –Ω–µ–¥–µ–ª—å ({percent:.2f}%).\n"
                      f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining} –Ω–µ–¥–µ–ª—å.")
        query.edit_message_text(stats_text, reply_markup=get_main_menu())
    elif data == "share":
        share_text = "–Ø –∏—Å–ø–æ–ª—å–∑—É—é @weeklife1_bot, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: @weekbot1"
        query.edit_message_text(share_text, reply_markup=get_main_menu())
    elif data == "subscribe":
        if is_subscribed:
            query.edit_message_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏!", reply_markup=get_main_menu())
        else:
            query.edit_message_text("–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ @weekbot1. –°–ª–µ–¥–∏ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏!", reply_markup=get_main_menu())
    elif data == "quick":
        quick_text = ("–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                      "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
                      "–û—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã.")
        query.edit_message_text(quick_text, reply_markup=get_main_menu())
    else:
        query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", reply_markup=get_main_menu())

def send_weekly_updates(context: CallbackContext):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT user_id, birth_date FROM users")
    users = c.fetchall()
    conn.close()

    for user_id, birth_date in users:
        try:
            image_path, weeks = generate_high_quality_life_chart(birth_date)
            context.bot.send_photo(chat_id=user_id, photo=open(image_path, 'rb'))
            context.bot.send_message(
                chat_id=user_id,
                text=f"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:\n–¢—ã –ø—Ä–æ–∂–∏–ª —Å–≤–æ—é {weeks} –Ω–µ–¥–µ–ª—é. {choice(MOTIVATIONAL_QUOTES)}",
                reply_markup=get_main_menu()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            continue

def main():
    init_db()
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    jq = updater.job_queue

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_birthdate))
    dp.add_handler(CallbackQueryHandler(handle_callback_query))

    # –†–∞—Å—Å—ã–ª–∫–∞ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é (604800 —Å–µ–∫—É–Ω–¥), –ø–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∞)
    jq.run_repeating(send_weekly_updates, interval=604800, first=10)

    updater.start_polling()
    updater.idle()

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "ok"

@app.route("/")
def index():
    return "LifeWeeksBot —Ä–∞–±–æ—Ç–∞–µ—Ç!"

if __name__ == '__main__':
    from telegram.ext import Updater
    init_db()
    bot.set_webhook(url=f"{URL}{TOKEN}")
    app.run(host="0.0.0.0", port=PORT)